require('dotenv').config();
const { generateJwtToken } = require('./src/utils/generateToken.js');
const { env } = require('./src/config/env.js');
const jwt = require('jsonwebtoken');

console.log('=== AUTH FLOW DEBUGGING ===');
console.log('Environment JWT Secret:', process.env.JWT_SECRET);
console.log('Config JWT Secret:', env.jwtSecret);

// Test the exact same flow as the application
console.log('\n--- Testing generateJwtToken function ---');
const testPayload = {
  id: '68ef53336af41f383563f89e',
  role: 'organizer',
  name: 'Oscar Organizer'
};

const appToken = generateJwtToken(testPayload);
console.log('Token generated by generateJwtToken:', appToken);

// Test verification with the verifyJwtToken function
console.log('\n--- Testing verifyJwtToken function ---');
try {
  const decoded = require('./src/utils/generateToken.js').verifyJwtToken(appToken);
  console.log('verifyJwtToken success:', decoded);
} catch (err) {
  console.log('verifyJwtToken failed:', err.message);
}

// Test verification with direct jwt.verify using env.jwtSecret
console.log('\n--- Testing direct jwt.verify with env.jwtSecret ---');
try {
  const decoded = jwt.verify(appToken, env.jwtSecret);
  console.log('Direct verification success:', decoded);
} catch (err) {
  console.log('Direct verification failed:', err.message);
}

// Test verification with direct jwt.verify using process.env.JWT_SECRET
console.log('\n--- Testing direct jwt.verify with process.env.JWT_SECRET ---');
try {
  const decoded = jwt.verify(appToken, process.env.JWT_SECRET);
  console.log('Direct verification with process.env.JWT_SECRET success:', decoded);
} catch (err) {
  console.log('Direct verification with process.env.JWT_SECRET failed:', err.message);
}

// Test what the auth middleware is actually doing
console.log('\n--- Simulating auth middleware with app token ---');
const authHeader = `Bearer ${appToken}`;
const token = authHeader.startsWith('Bearer ') ? authHeader.slice(7) : null;
console.log('Extracted token:', token);

if (token) {
  try {
    const decoded = jwt.verify(token, env.jwtSecret);
    console.log('Auth middleware simulation success:', decoded);
  } catch (err) {
    console.log('Auth middleware simulation failed:', err.message);
  }
}